{
	"allowedScopes": [
		"environment"
	],
	"constraints": [
		{
			"customValidatorId": "span-extraction-id-existence-validator",
			"type": "CUSTOM_VALIDATOR_REF"
		},
		{
			"customValidatorId": "span-sd-config-service-and-method-name-placeholder-existence-validator",
			"type": "CUSTOM_VALIDATOR_REF"
		}
	],
	"description": "Configure a list of span service detection rules which are evaluated in order.",
	"displayName": "Span service detection configuration",
	"documentation": "When the **first** rule matches, the service detection will proceed. Subsequent rules will not be evaluated.\n\nNote: This config applies only to spans captured by OneAgent.",
	"dynatrace": "1",
	"enums": {
		"AttrKeyBooleanComparisonType": {
			"description": "",
			"displayName": "AttrKeyBooleanComparisonType",
			"documentation": "",
			"items": [
				{
					"displayName": "Equals",
					"value": "EQUALS"
				},
				{
					"displayName": "Does not equal",
					"value": "DOES_NOT_EQUAL"
				},
				{
					"displayName": "Exists",
					"value": "EXISTS"
				},
				{
					"displayName": "Does not exist",
					"value": "DOES_NOT_EXIST"
				}
			],
			"type": "enum"
		},
		"AttrKeyStringComparisonType": {
			"description": "",
			"displayName": "AttrKeyStringComparisonType",
			"documentation": "",
			"items": [
				{
					"displayName": "Equals",
					"value": "EQUALS"
				},
				{
					"displayName": "Does not equal",
					"value": "DOES_NOT_EQUAL"
				},
				{
					"displayName": "Contains",
					"value": "CONTAINS"
				},
				{
					"displayName": "Does not contain",
					"value": "DOES_NOT_CONTAIN"
				},
				{
					"displayName": "Starts with",
					"value": "STARTS_WITH"
				},
				{
					"displayName": "Does not start with",
					"value": "DOES_NOT_START_WITH"
				},
				{
					"displayName": "Ends with",
					"value": "ENDS_WITH"
				},
				{
					"displayName": "Does not end with",
					"value": "DOES_NOT_END_WITH"
				},
				{
					"displayName": "Exists",
					"value": "EXISTS"
				},
				{
					"displayName": "Does not exist",
					"value": "DOES_NOT_EXIST"
				}
			],
			"type": "enum"
		},
		"BooleanComparisonType": {
			"description": "",
			"displayName": "BooleanComparisonType",
			"documentation": "",
			"items": [
				{
					"displayName": "Equals",
					"value": "EQUALS"
				},
				{
					"displayName": "Does not equal",
					"value": "DOES_NOT_EQUAL"
				}
			],
			"type": "enum"
		},
		"BooleanValue": {
			"description": "",
			"displayName": "BooleanValue",
			"documentation": "",
			"items": [
				{
					"displayName": "True",
					"value": "TRUE"
				},
				{
					"displayName": "False",
					"value": "FALSE"
				}
			],
			"type": "enum"
		},
		"ComparisonDataType": {
			"description": "",
			"displayName": "ComparisonDataType",
			"documentation": "",
			"items": [
				{
					"displayName": "String",
					"value": "STRING"
				},
				{
					"displayName": "Integer",
					"value": "INTEGER"
				},
				{
					"displayName": "Float",
					"value": "FLOAT"
				},
				{
					"displayName": "Boolean",
					"value": "BOOLEAN"
				}
			],
			"type": "enum"
		},
		"ExtractionMatcherType": {
			"description": "",
			"displayName": "ExtractionMatcherType",
			"documentation": "",
			"items": [
				{
					"displayName": "Before",
					"value": "BEFORE"
				},
				{
					"displayName": "After",
					"value": "AFTER"
				},
				{
					"displayName": "Between",
					"value": "BETWEEN"
				},
				{
					"displayName": "SplitAndSelect",
					"value": "SPLIT_AND_SELECT"
				}
			],
			"type": "enum"
		},
		"KnownMethodInput": {
			"description": "",
			"displayName": "KnownMethodInput",
			"documentation": "",
			"items": [
				{
					"displayName": "Span name",
					"value": "SPAN_NAME"
				},
				{
					"displayName": "Span kind",
					"value": "SPAN_KIND"
				},
				{
					"displayName": "Span attribute",
					"value": "SPAN_ATTRIBUTE"
				},
				{
					"displayName": "Instrumentation scope name",
					"value": "INSTRUMENTATION_SCOPE_NAME"
				},
				{
					"displayName": "Instrumentation scope version",
					"value": "INSTRUMENTATION_SCOPE_VERSION"
				},
				{
					"displayName": "Extraction value",
					"value": "EXTRACTION_VALUE"
				},
				{
					"displayName": "Resource attribute",
					"value": "RESOURCE_ATTRIBUTE"
				}
			],
			"type": "enum"
		},
		"KnownServiceInput": {
			"description": "",
			"displayName": "KnownServiceInput",
			"documentation": "",
			"items": [
				{
					"displayName": "Span name",
					"value": "SPAN_NAME"
				},
				{
					"displayName": "Span kind",
					"value": "SPAN_KIND"
				},
				{
					"displayName": "Span attribute",
					"value": "SPAN_ATTRIBUTE"
				},
				{
					"displayName": "Instrumentation scope name",
					"value": "INSTRUMENTATION_SCOPE_NAME"
				},
				{
					"displayName": "Instrumentation scope version",
					"value": "INSTRUMENTATION_SCOPE_VERSION"
				},
				{
					"displayName": "Process group id",
					"value": "PG_ID"
				},
				{
					"displayName": "Extraction value",
					"value": "EXTRACTION_VALUE"
				},
				{
					"displayName": "Resource attribute",
					"value": "RESOURCE_ATTRIBUTE"
				}
			],
			"type": "enum"
		},
		"MethodRulesType": {
			"description": "",
			"displayName": "MethodRulesType",
			"documentation": "",
			"items": [
				{
					"displayName": "No service",
					"value": "NO_SERVICE"
				},
				{
					"displayName": "Method id and name",
					"value": "METHOD_ID_AND_NAME"
				}
			],
			"type": "enum"
		},
		"NumberComparisonType": {
			"description": "",
			"displayName": "NumberComparisonType",
			"documentation": "",
			"items": [
				{
					"displayName": "Equals",
					"value": "EQUALS"
				},
				{
					"displayName": "Does not equal",
					"value": "DOES_NOT_EQUAL"
				},
				{
					"displayName": "Greater than",
					"value": "GREATER_THAN"
				},
				{
					"displayName": "Not greater than",
					"value": "NOT_GREATER_THAN"
				},
				{
					"displayName": "Lower than",
					"value": "LOWER_THAN"
				},
				{
					"displayName": "Not lower than",
					"value": "NOT_LOWER_THAN"
				},
				{
					"displayName": "Greater than or equal",
					"value": "GREATER_THAN_OR_EQUAL"
				},
				{
					"displayName": "Not greater than or equal",
					"value": "NOT_GREATER_THAN_OR_EQUAL"
				},
				{
					"displayName": "Lower than or equal",
					"value": "LOWER_THAN_OR_EQUAL"
				},
				{
					"displayName": "Not lower than or equal",
					"value": "NOT_LOWER_THAN_OR_EQUAL"
				},
				{
					"displayName": "Exists",
					"value": "EXISTS"
				},
				{
					"displayName": "Does not exist",
					"value": "DOES_NOT_EXIST"
				}
			],
			"type": "enum"
		},
		"ServiceDetectionType": {
			"description": "",
			"displayName": "ServiceDetectionType",
			"documentation": "",
			"items": [
				{
					"displayName": "No service",
					"value": "NO_SERVICE"
				},
				{
					"displayName": "Service id and name",
					"value": "SERVICE_ID_AND_NAME"
				}
			],
			"type": "enum"
		},
		"SpanEventMatcherSource": {
			"description": "",
			"displayName": "SpanEventMatcherSource",
			"documentation": "",
			"items": [
				{
					"displayName": "Span event name",
					"value": "SPAN_EVENT_NAME"
				},
				{
					"displayName": "Span event attribute",
					"value": "SPAN_EVENT_ATTRIBUTE"
				}
			],
			"type": "enum"
		},
		"SpanKind": {
			"description": "",
			"displayName": "SpanKind",
			"documentation": "",
			"items": [
				{
					"displayName": "Internal",
					"value": "SPAN_KIND_INTERNAL"
				},
				{
					"displayName": "Server",
					"value": "SPAN_KIND_SERVER"
				},
				{
					"displayName": "Client",
					"value": "SPAN_KIND_CLIENT"
				},
				{
					"displayName": "Producer",
					"value": "SPAN_KIND_PRODUCER"
				},
				{
					"displayName": "Consumer",
					"value": "SPAN_KIND_CONSUMER"
				}
			],
			"type": "enum"
		},
		"SpanMatcherSource": {
			"description": "",
			"displayName": "SpanMatcherSource",
			"documentation": "",
			"items": [
				{
					"displayName": "Span name",
					"value": "SPAN_NAME"
				},
				{
					"displayName": "Span kind",
					"value": "SPAN_KIND"
				},
				{
					"displayName": "Span attribute",
					"value": "SPAN_ATTRIBUTE"
				},
				{
					"displayName": "Instrumentation scope name",
					"value": "INSTRUMENTATION_SCOPE_NAME"
				},
				{
					"displayName": "Instrumentation scope version",
					"value": "INSTRUMENTATION_SCOPE_VERSION"
				},
				{
					"displayName": "Resource attribute",
					"value": "RESOURCE_ATTRIBUTE"
				},
				{
					"displayName": "Span event",
					"value": "SPAN_EVENT"
				}
			],
			"type": "enum"
		},
		"StringComparisonType": {
			"description": "",
			"displayName": "StringComparisonType",
			"documentation": "",
			"items": [
				{
					"displayName": "Equals",
					"value": "EQUALS"
				},
				{
					"displayName": "Does not equal",
					"value": "DOES_NOT_EQUAL"
				},
				{
					"displayName": "Contains",
					"value": "CONTAINS"
				},
				{
					"displayName": "Does not contain",
					"value": "DOES_NOT_CONTAIN"
				},
				{
					"displayName": "Starts with",
					"value": "STARTS_WITH"
				},
				{
					"displayName": "Does not start with",
					"value": "DOES_NOT_START_WITH"
				},
				{
					"displayName": "Ends with",
					"value": "ENDS_WITH"
				},
				{
					"displayName": "Does not end with",
					"value": "DOES_NOT_END_WITH"
				}
			],
			"type": "enum"
		},
		"ValueSourceType": {
			"description": "",
			"displayName": "ValueSourceType",
			"documentation": "",
			"items": [
				{
					"displayName": "Span name",
					"value": "SPAN_NAME"
				},
				{
					"displayName": "Span attribute",
					"value": "SPAN_ATTRIBUTE"
				},
				{
					"displayName": "Instrumentation scope name",
					"value": "INSTRUMENTATION_SCOPE_NAME"
				},
				{
					"displayName": "Instrumentation scope version",
					"value": "INSTRUMENTATION_SCOPE_VERSION"
				},
				{
					"displayName": "Resource attribute",
					"value": "RESOURCE_ATTRIBUTE"
				}
			],
			"type": "enum"
		}
	},
	"maxObjects": 1000,
	"metadata": {
		"addItemButton": "Add rule",
		"itemDisplayName": "New rule"
	},
	"multiObject": true,
	"ordered": true,
	"properties": {
		"enabled": {
			"default": true,
			"description": "If this is true, the rule will be evaluated.",
			"displayName": "Enabled",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "ALWAYS",
			"nullable": false,
			"type": "boolean"
		},
		"rule": {
			"description": "",
			"displayName": "Rule",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": {
				"$ref": "#/types/Rule"
			}
		}
	},
	"schemaGroups": [
		"group:service-detection"
	],
	"schemaId": "builtin:span-service-detection-config",
	"types": {
		"Condition": {
			"description": "",
			"displayName": "Condition",
			"documentation": "",
			"properties": {
				"attrKeyBoolComparisonType": {
					"default": "EQUALS",
					"description": "Note: `Exists/Does not exist` ignores any type information i.e. the condition only checks for the existence/non-existence of the **attribute key**",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValues": [
									"SPAN_ATTRIBUTE",
									"RESOURCE_ATTRIBUTE"
								],
								"property": "source",
								"type": "IN"
							},
							{
								"expectedValue": "BOOLEAN",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": {
						"$ref": "#/enums/AttrKeyBooleanComparisonType"
					}
				},
				"attrKeyStringComparisonType": {
					"default": "EQUALS",
					"description": "Note: `Exists/Does not exist` ignores any type information i.e. the condition only checks for the existence/non-existence of the **attribute key**",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValues": [
									"SPAN_ATTRIBUTE",
									"RESOURCE_ATTRIBUTE"
								],
								"property": "source",
								"type": "IN"
							},
							{
								"expectedValue": "STRING",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": {
						"$ref": "#/enums/AttrKeyStringComparisonType"
					}
				},
				"boolComparisonType": {
					"default": "EQUALS",
					"description": "",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_KIND",
						"property": "source",
						"type": "EQUALS"
					},
					"type": {
						"$ref": "#/enums/BooleanComparisonType"
					}
				},
				"boolValue": {
					"default": "TRUE",
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "BOOLEAN",
								"property": "dataType",
								"type": "EQUALS"
							},
							{
								"expectedValues": [
									"EQUALS",
									"DOES_NOT_EQUAL"
								],
								"property": "attrKeyBoolComparisonType",
								"type": "IN"
							}
						],
						"type": "AND"
					},
					"type": {
						"$ref": "#/enums/BooleanValue"
					}
				},
				"caseSensitive": {
					"default": false,
					"description": "Affects value(s)",
					"displayName": "Case sensitive",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"property": "stringComparisonType",
									"type": "NULL"
								},
								"type": "NOT"
							},
							{
								"preconditions": [
									{
										"expectedValues": [
											"SPAN_ATTRIBUTE",
											"RESOURCE_ATTRIBUTE"
										],
										"property": "source",
										"type": "IN"
									},
									{
										"expectedValue": "STRING",
										"property": "dataType",
										"type": "EQUALS"
									},
									{
										"precondition": {
											"expectedValues": [
												"EXISTS",
												"DOES_NOT_EXIST"
											],
											"property": "attrKeyStringComparisonType",
											"type": "IN"
										},
										"type": "NOT"
									}
								],
								"type": "AND"
							}
						],
						"type": "OR"
					},
					"type": "boolean"
				},
				"dataType": {
					"default": "STRING",
					"description": "",
					"displayName": "Data Type",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValues": [
							"SPAN_ATTRIBUTE",
							"RESOURCE_ATTRIBUTE"
						],
						"property": "source",
						"type": "IN"
					},
					"type": {
						"$ref": "#/enums/ComparisonDataType"
					}
				},
				"eventConditions": {
					"description": "",
					"displayName": "Event conditions",
					"documentation": "Specify event conditions which should be evaluated for this rule. A rule is applied if all of the specified conditions match.",
					"items": {
						"description": "",
						"displayName": "Event condition",
						"documentation": "",
						"type": {
							"$ref": "#/types/EventCondition"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add event condition",
						"itemDisplayName": "New event condition"
					},
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValues": [
							"SPAN_EVENT"
						],
						"property": "source",
						"type": "IN"
					},
					"type": "set"
				},
				"floatValue": {
					"constraints": [
						{
							"minimum": 0,
							"type": "RANGE"
						}
					],
					"default": 0,
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"expectedValue": "SPAN_KIND",
									"property": "source",
									"type": "EQUALS"
								},
								"type": "NOT"
							},
							{
								"precondition": {
									"expectedValues": [
										"EQUALS",
										"DOES_NOT_EQUAL",
										"EXISTS",
										"DOES_NOT_EXIST"
									],
									"property": "numComparisonType",
									"type": "IN"
								},
								"type": "NOT"
							},
							{
								"expectedValue": "FLOAT",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": "float"
				},
				"floatValues": {
					"description": "",
					"displayName": "Values",
					"documentation": "If regular comparison type i.e. `Equals` is used, then **any** of the listed values should match for the condition to be evaluated to true\n\nIf negated comparison type i.e. `Does not equal` is used, then **none** of the listed values should match for the condition to be evaluated to true",
					"items": {
						"constraints": [
							{
								"minimum": 0,
								"type": "RANGE"
							}
						],
						"description": "",
						"displayName": "Value",
						"documentation": "",
						"type": "float"
					},
					"maxObjects": 100,
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"expectedValue": "SPAN_KIND",
									"property": "source",
									"type": "EQUALS"
								},
								"type": "NOT"
							},
							{
								"expectedValues": [
									"EQUALS",
									"DOES_NOT_EQUAL"
								],
								"property": "numComparisonType",
								"type": "IN"
							},
							{
								"expectedValue": "FLOAT",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": "set"
				},
				"intValue": {
					"constraints": [
						{
							"minimum": 0,
							"type": "RANGE"
						}
					],
					"default": 0,
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"expectedValue": "SPAN_KIND",
									"property": "source",
									"type": "EQUALS"
								},
								"type": "NOT"
							},
							{
								"precondition": {
									"expectedValues": [
										"EQUALS",
										"DOES_NOT_EQUAL",
										"EXISTS",
										"DOES_NOT_EXIST"
									],
									"property": "numComparisonType",
									"type": "IN"
								},
								"type": "NOT"
							},
							{
								"expectedValue": "INTEGER",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": "integer"
				},
				"intValues": {
					"description": "",
					"displayName": "Values",
					"documentation": "If regular comparison type i.e. `Equals` is used, then **any** of the listed values should match for the condition to be evaluated to true\n\nIf negated comparison type i.e. `Does not equal` is used, then **none** of the listed values should match for the condition to be evaluated to true",
					"items": {
						"constraints": [
							{
								"minimum": 0,
								"type": "RANGE"
							}
						],
						"description": "",
						"displayName": "Value",
						"documentation": "",
						"type": "integer"
					},
					"maxObjects": 100,
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"expectedValue": "SPAN_KIND",
									"property": "source",
									"type": "EQUALS"
								},
								"type": "NOT"
							},
							{
								"expectedValues": [
									"EQUALS",
									"DOES_NOT_EQUAL"
								],
								"property": "numComparisonType",
								"type": "IN"
							},
							{
								"expectedValue": "INTEGER",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": "set"
				},
				"numComparisonType": {
					"default": "EQUALS",
					"description": "Note: `Exists/Does not exist` ignores any type information i.e. the condition only checks for the existence/non-existence of the **attribute key**",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValues": [
							"INTEGER",
							"FLOAT"
						],
						"property": "dataType",
						"type": "IN"
					},
					"type": {
						"$ref": "#/enums/NumberComparisonType"
					}
				},
				"resourceAttributeKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "resource-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "resource-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "RESOURCE_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"source": {
					"default": "SPAN_NAME",
					"description": "",
					"displayName": "Source",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/SpanMatcherSource"
					}
				},
				"sourceKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "span-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "span-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"spanKindValue": {
					"description": "",
					"displayName": "Values",
					"documentation": "",
					"items": {
						"description": "",
						"displayName": "Value",
						"documentation": "",
						"type": {
							"$ref": "#/enums/SpanKind"
						}
					},
					"maxObjects": 100,
					"minObjects": 0,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_KIND",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "set"
				},
				"strValues": {
					"description": "",
					"displayName": "Values",
					"documentation": "If regular comparison type i.e. `Equals` is used, then **any** of the listed values should match for the condition to be evaluated to true\n\nIf negated comparison type i.e. `Does not equal` is used, then **none** of the listed values should match for the condition to be evaluated to true",
					"items": {
						"constraints": [
							{
								"maxLength": 500,
								"minLength": 1,
								"type": "LENGTH"
							}
						],
						"description": "",
						"displayName": "Value",
						"documentation": "",
						"type": "text"
					},
					"maxObjects": 100,
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"expectedValues": [
										"SPAN_KIND",
										"SPAN_ATTRIBUTE",
										"RESOURCE_ATTRIBUTE",
										"SPAN_EVENT"
									],
									"property": "source",
									"type": "IN"
								},
								"type": "NOT"
							},
							{
								"preconditions": [
									{
										"precondition": {
											"expectedValues": [
												"EXISTS",
												"DOES_NOT_EXIST"
											],
											"property": "attrKeyStringComparisonType",
											"type": "IN"
										},
										"type": "NOT"
									},
									{
										"expectedValue": "STRING",
										"property": "dataType",
										"type": "EQUALS"
									}
								],
								"type": "AND"
							}
						],
						"type": "OR"
					},
					"type": "set"
				},
				"stringComparisonType": {
					"default": "EQUALS",
					"description": "",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"precondition": {
							"expectedValues": [
								"SPAN_ATTRIBUTE",
								"SPAN_KIND",
								"RESOURCE_ATTRIBUTE",
								"SPAN_EVENT"
							],
							"property": "source",
							"type": "IN"
						},
						"type": "NOT"
					},
					"type": {
						"$ref": "#/enums/StringComparisonType"
					}
				}
			},
			"summaryPattern": "{source} {sourceKey}{resourceAttributeKey} {stringComparisonType} {attrKeyStringComparisonType} {numComparisonType} {boolComparisonType} {attrKeyBoolComparisonType} {boolValue}{intValue}{intValues}{floatValue}{floatValues}{strValues}{spanKindValue}",
			"type": "object",
			"version": "0.0.5",
			"versionInfo": ""
		},
		"DefaultMethodRule": {
			"description": "",
			"displayName": "Default method rule",
			"documentation": "",
			"properties": {
				"id": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Id",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"placeholder": "Change-Me"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "METHOD_ID_AND_NAME",
						"property": "outputType",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"name": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Name",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"placeholder": "Change-Me"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "METHOD_ID_AND_NAME",
						"property": "outputType",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"outputType": {
					"default": "METHOD_ID_AND_NAME",
					"description": "",
					"displayName": "Output",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/MethodRulesType"
					}
				}
			},
			"summaryPattern": "",
			"type": "object",
			"version": "0.0.1",
			"versionInfo": ""
		},
		"EventCondition": {
			"description": "",
			"displayName": "Event condition",
			"documentation": "",
			"properties": {
				"attrKeyBoolComparisonType": {
					"default": "EQUALS",
					"description": "Note: `Exists/Does not exist` ignores any type information i.e. the condition only checks for the existence/non-existence of the **attribute key**",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "SPAN_EVENT_ATTRIBUTE",
								"property": "source",
								"type": "EQUALS"
							},
							{
								"expectedValue": "BOOLEAN",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": {
						"$ref": "#/enums/AttrKeyBooleanComparisonType"
					}
				},
				"attrKeyStringComparisonType": {
					"default": "EQUALS",
					"description": "Note: `Exists/Does not exist` ignores any type information i.e. the condition only checks for the existence/non-existence of the **attribute key**",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "SPAN_EVENT_ATTRIBUTE",
								"property": "source",
								"type": "EQUALS"
							},
							{
								"expectedValue": "STRING",
								"property": "dataType",
								"type": "EQUALS"
							}
						],
						"type": "AND"
					},
					"type": {
						"$ref": "#/enums/AttrKeyStringComparisonType"
					}
				},
				"boolValue": {
					"default": "TRUE",
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "BOOLEAN",
								"property": "dataType",
								"type": "EQUALS"
							},
							{
								"expectedValues": [
									"EQUALS",
									"DOES_NOT_EQUAL"
								],
								"property": "attrKeyBoolComparisonType",
								"type": "IN"
							}
						],
						"type": "AND"
					},
					"type": {
						"$ref": "#/enums/BooleanValue"
					}
				},
				"caseSensitive": {
					"default": false,
					"description": "Affects value(s)",
					"displayName": "Case sensitive",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"property": "stringComparisonType",
									"type": "NULL"
								},
								"type": "NOT"
							},
							{
								"preconditions": [
									{
										"expectedValue": "SPAN_EVENT_ATTRIBUTE",
										"property": "source",
										"type": "EQUALS"
									},
									{
										"expectedValue": "STRING",
										"property": "dataType",
										"type": "EQUALS"
									},
									{
										"precondition": {
											"expectedValues": [
												"EXISTS",
												"DOES_NOT_EXIST"
											],
											"property": "attrKeyStringComparisonType",
											"type": "IN"
										},
										"type": "NOT"
									}
								],
								"type": "AND"
							}
						],
						"type": "OR"
					},
					"type": "boolean"
				},
				"dataType": {
					"default": "STRING",
					"description": "",
					"displayName": "Data Type",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_EVENT_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": {
						"$ref": "#/enums/ComparisonDataType"
					}
				},
				"floatValue": {
					"constraints": [
						{
							"minimum": 0,
							"type": "RANGE"
						}
					],
					"default": 0,
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "FLOAT",
								"property": "dataType",
								"type": "EQUALS"
							},
							{
								"precondition": {
									"expectedValues": [
										"EQUALS",
										"DOES_NOT_EQUAL",
										"EXISTS",
										"DOES_NOT_EXIST"
									],
									"property": "numComparisonType",
									"type": "IN"
								},
								"type": "NOT"
							}
						],
						"type": "AND"
					},
					"type": "float"
				},
				"floatValues": {
					"description": "",
					"displayName": "Values",
					"documentation": "If regular comparison type i.e. `Equals` is used, then **any** of the listed values should match for the condition to be evaluated to true\n\nIf negated comparison type i.e. `Does not equal` is used, then **none** of the listed values should match for the condition to be evaluated to true",
					"items": {
						"constraints": [
							{
								"minimum": 0,
								"type": "RANGE"
							}
						],
						"description": "",
						"displayName": "Value",
						"documentation": "",
						"type": "float"
					},
					"maxObjects": 100,
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "FLOAT",
								"property": "dataType",
								"type": "EQUALS"
							},
							{
								"expectedValues": [
									"EQUALS",
									"DOES_NOT_EQUAL"
								],
								"property": "numComparisonType",
								"type": "IN"
							}
						],
						"type": "AND"
					},
					"type": "set"
				},
				"intValue": {
					"constraints": [
						{
							"minimum": 0,
							"type": "RANGE"
						}
					],
					"default": 0,
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "INTEGER",
								"property": "dataType",
								"type": "EQUALS"
							},
							{
								"precondition": {
									"expectedValues": [
										"EQUALS",
										"DOES_NOT_EQUAL",
										"EXISTS",
										"DOES_NOT_EXIST"
									],
									"property": "numComparisonType",
									"type": "IN"
								},
								"type": "NOT"
							}
						],
						"type": "AND"
					},
					"type": "integer"
				},
				"intValues": {
					"description": "",
					"displayName": "Values",
					"documentation": "If regular comparison type i.e. `Equals` is used, then **any** of the listed values should match for the condition to be evaluated to true\n\nIf negated comparison type i.e. `Does not equal` is used, then **none** of the listed values should match for the condition to be evaluated to true",
					"items": {
						"constraints": [
							{
								"minimum": 0,
								"type": "RANGE"
							}
						],
						"description": "",
						"displayName": "Value",
						"documentation": "",
						"type": "integer"
					},
					"maxObjects": 100,
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"expectedValue": "INTEGER",
								"property": "dataType",
								"type": "EQUALS"
							},
							{
								"expectedValues": [
									"EQUALS",
									"DOES_NOT_EQUAL"
								],
								"property": "numComparisonType",
								"type": "IN"
							}
						],
						"type": "AND"
					},
					"type": "set"
				},
				"numComparisonType": {
					"default": "EQUALS",
					"description": "Note: `Exists/Does not exist` ignores any type information i.e. the condition only checks for the existence/non-existence of the **attribute key**",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValues": [
							"INTEGER",
							"FLOAT"
						],
						"property": "dataType",
						"type": "IN"
					},
					"type": {
						"$ref": "#/enums/NumberComparisonType"
					}
				},
				"source": {
					"default": "SPAN_EVENT_NAME",
					"description": "",
					"displayName": "Source",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/SpanEventMatcherSource"
					}
				},
				"sourceKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "span-event-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "span-event-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_EVENT_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"strValues": {
					"description": "",
					"displayName": "Values",
					"documentation": "If regular comparison type i.e. `Equals` is used, then **any** of the listed values should match for the condition to be evaluated to true\n\nIf negated comparison type i.e. `Does not equal` is used, then **none** of the listed values should match for the condition to be evaluated to true",
					"items": {
						"constraints": [
							{
								"maxLength": 500,
								"minLength": 1,
								"type": "LENGTH"
							}
						],
						"description": "",
						"displayName": "Value",
						"documentation": "",
						"type": "text"
					},
					"maxObjects": 100,
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"preconditions": [
							{
								"precondition": {
									"expectedValues": [
										"SPAN_EVENT_ATTRIBUTE"
									],
									"property": "source",
									"type": "IN"
								},
								"type": "NOT"
							},
							{
								"preconditions": [
									{
										"precondition": {
											"expectedValues": [
												"EXISTS",
												"DOES_NOT_EXIST"
											],
											"property": "attrKeyStringComparisonType",
											"type": "IN"
										},
										"type": "NOT"
									},
									{
										"expectedValue": "STRING",
										"property": "dataType",
										"type": "EQUALS"
									}
								],
								"type": "AND"
							}
						],
						"type": "OR"
					},
					"type": "set"
				},
				"stringComparisonType": {
					"default": "EQUALS",
					"description": "",
					"displayName": "Comparison Type",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValues": [
							"SPAN_EVENT_NAME"
						],
						"property": "source",
						"type": "IN"
					},
					"type": {
						"$ref": "#/enums/StringComparisonType"
					}
				}
			},
			"summaryPattern": "{source} {sourceKey} {stringComparisonType} {attrKeyStringComparisonType} {numComparisonType} {attrKeyBoolComparisonType} {boolValue}{intValue}{intValues}{floatValue}{floatValues}{strValues}",
			"type": "object",
			"version": "0.0.2",
			"versionInfo": ""
		},
		"Extraction": {
			"description": "",
			"displayName": "Extraction",
			"documentation": "",
			"properties": {
				"transformations": {
					"description": "",
					"displayName": "Transformations",
					"documentation": "",
					"items": {
						"description": "",
						"displayName": "Transformation",
						"documentation": "",
						"type": {
							"$ref": "#/types/ExtractionType"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add transformation",
						"itemDisplayName": "New transformation"
					},
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "list"
				},
				"uniqueId": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customMessage": "Invalid syntax format. Please check the documentation for more details",
							"pattern": "^[A-z][\\w\\-\\.]*$",
							"type": "PATTERN"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "This unique identifier can be used to reference to the result of the extraction in later steps (f.ex. Service detection \u0026 Service method detection)",
					"displayName": "Id",
					"documentation": "The unique identifier must start with a letter and allows the usage of `numbers` and the following special characters [**.**  **_**  **-**]",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				},
				"valueSource": {
					"description": "",
					"displayName": "Value source",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/types/ValueSource"
					}
				}
			},
			"summaryPattern": "{uniqueId} {valueSource.source} {valueSource.attributeKey}",
			"type": "object",
			"version": "0.0.1",
			"versionInfo": ""
		},
		"ExtractionType": {
			"description": "",
			"displayName": "Extraction",
			"documentation": "",
			"properties": {
				"marker": {
					"constraints": [
						{
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Marker",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"placeholder": "marker"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				},
				"marker2": {
					"constraints": [
						{
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Marker_2",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"placeholder": "marker_2"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "BETWEEN",
						"property": "type",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"splitAndSelectMarker": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "selectAtIndex",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"placeholder": "selectAtIndex"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPLIT_AND_SELECT",
						"property": "type",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"type": {
					"default": "BEFORE",
					"description": "",
					"displayName": "Extract",
					"documentation": "`Before (marker)`\n\nSelect the part of a longer string that comes before the given marker string. The marker string is not part of the returned result. If the marker is not found in the input, the resulting value will be empty.  \n`Example: Before(\"/\") on input \"AC/DC\" returns \"AC\"`\n\n`After (marker)`\n\nSelect the part of a longer string that comes after the given marker string. The marker string is not part of the returned result. If the marker is not found in the input, the resulting value will be empty.  \n`Example: After(\"/\") on input \"AC/DC\" returns \"DC\"`\n\n`Between (marker_1, marker_2)`\n\nSelect the part of a longer string that lies between the marker string 1 and marker string 2 (first occurrence of marker string 1, and first occurrence of marker string 2 after marker string 1). The marker strings are not part of the returned result. If any marker is not found in the input, the resulting value will be empty.  \n`Example: Between(\"AC\", \"DC\") on input \"AC/DC\" returns \"/\"`\n\n`SplitAndSelect (marker, selectAtIndex)`\n\nThe longer string is split into a list of substrings identified by the given marker string. The selectAtIndex parameter allows to pick one of the substrings in the produced list. If the marker is not found in the input, the resulting list will only contain the original value. SelectAtIndex is 1 based, i.e. the first item has index 1.  \n`Example: SplitAndSelect(\"/\", 2) on input \"AC/DC\" returns \"DC\"`",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/ExtractionMatcherType"
					}
				}
			},
			"summaryPattern": "{type} ( {marker} {marker2} {splitAndSelectMarker})",
			"type": "object",
			"version": "0.0.1",
			"versionInfo": ""
		},
		"MethodIdContributor": {
			"description": "",
			"displayName": "MethodIdContributor",
			"documentation": "",
			"properties": {
				"extractionValue": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Extraction id",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "EXTRACTION_VALUE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"resourceAttributeKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "resource-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "resource-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "RESOURCE_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"source": {
					"default": "SPAN_NAME",
					"description": "",
					"displayName": "Source",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/KnownMethodInput"
					}
				},
				"sourceKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "span-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "span-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				}
			},
			"summaryPattern": "{source} {sourceKey}{resourceAttributeKey}{extractionValue}",
			"type": "object",
			"version": "0.0.3",
			"versionInfo": ""
		},
		"Rule": {
			"description": "",
			"displayName": "Rule",
			"documentation": "",
			"properties": {
				"conditions": {
					"description": "",
					"displayName": "Conditions",
					"documentation": "Specify all conditions which should be evaluated for this rule. A rule is applied if all of the listed conditions match.",
					"items": {
						"description": "",
						"displayName": "Condition",
						"documentation": "",
						"type": {
							"$ref": "#/types/Condition"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add condition",
						"itemDisplayName": "New condition"
					},
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "set"
				},
				"defaultMethodRule": {
					"description": "",
					"displayName": "Default method rule",
					"documentation": "Choose whether the span service detection rule should detect a service call or not in case there are **no matching** `service method detection rules` but the `service detection rule` **matches** the input.",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/types/DefaultMethodRule"
					}
				},
				"extractions": {
					"constraints": [
						{
							"customMessage": "Extraction id must be unique.",
							"type": "UNIQUE",
							"uniqueProperties": [
								"uniqueId"
							]
						}
					],
					"description": "",
					"displayName": "Extractions (Optional)",
					"documentation": "Specify a list of extractions that are inherently bound to the rule they are defined in.\n\nEach extraction is composed of **at least one** transformation but it can also be constructed from multiple chained transformations.\n\nIf several transformations are specified, they are handled sequentially from top to bottom. Each transformation is applied to the result of the preceding transformation. For example, the second transformation is applied to the result of the first transformation.",
					"items": {
						"description": "",
						"displayName": "Extraction",
						"documentation": "",
						"type": {
							"$ref": "#/types/Extraction"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add extraction",
						"itemDisplayName": "New extraction"
					},
					"minObjects": 0,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "list"
				},
				"ruleName": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Rule name",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				},
				"serviceDetection": {
					"description": "",
					"displayName": "Service detection",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/types/ServiceDetection"
					}
				},
				"serviceMethodDetectionRule": {
					"constraints": [
						{
							"customMessage": "Method rule name must be unique.",
							"type": "UNIQUE",
							"uniqueProperties": [
								"methodRuleName"
							]
						}
					],
					"description": "",
					"displayName": "Service method detection",
					"documentation": "Specify a list of rules which are evaluated in order. When the **first** rule matches, the service detection will proceed. Subsequent rules will not be evaluated.",
					"items": {
						"description": "",
						"displayName": "Method rule",
						"documentation": "",
						"type": {
							"$ref": "#/types/ServiceMethodDetectionRule"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add method rule",
						"itemDisplayName": "New method rule"
					},
					"minObjects": 0,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "list"
				},
				"technology": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"datasource": {
						"filterProperties": [],
						"fullContext": false,
						"identifier": "serviceTechnologyDataSource",
						"resetValue": "INVALID_ONLY",
						"useApiSearch": false,
						"validate": true
					},
					"description": "",
					"displayName": "Technology",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": true,
					"subType": "datasource",
					"type": "text"
				}
			},
			"summaryPattern": "{ruleName}",
			"type": "object",
			"version": "0.0.5",
			"versionInfo": ""
		},
		"ServiceDetection": {
			"constraints": [
				{
					"customValidatorId": "span-sd-config-service-name-placeholder-is-id-contributors-validator",
					"type": "CUSTOM_VALIDATOR_REF"
				}
			],
			"description": "",
			"displayName": "ServiceDetection",
			"documentation": "",
			"properties": {
				"id": {
					"description": "",
					"displayName": "Service id contributors",
					"documentation": "",
					"items": {
						"description": "",
						"displayName": "Service id contributor",
						"documentation": "",
						"type": {
							"$ref": "#/types/ServiceIdContributor"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add service id contributor",
						"itemDisplayName": "New service id contributor"
					},
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SERVICE_ID_AND_NAME",
						"property": "outputType",
						"type": "EQUALS"
					},
					"type": "set"
				},
				"outputType": {
					"default": "SERVICE_ID_AND_NAME",
					"description": "",
					"displayName": "Output",
					"documentation": "`No service`\n\nAny input matching the current rule would not be detected as a service.\n\n`Service id and name`\n\nThe service id is constructed from a set of id contributors. The service name is specified as a format string with placeholders, where each placeholder refers to any of the id contributors. \n\nEach service id contributor induces the condition that its input is available. If it is not available, the rule is considered **not matching**, the rule is not applied, and ruleset evaluation continues.",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/ServiceDetectionType"
					}
				},
				"serviceName": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Service name",
					"documentation": "`Prefixes`: [SpanAttribute, Extraction, ResourceAttribute] i.e. {SpanAttribute:http.url}, {Extraction:my_variable}, {ResourceAttribute:service.name}\n\n`Well-known placeholders`: {SpanName}, {SpanKind}, {InstrumentationScopeName}, {InstrumentationScopeVersion}\n\nSpan attributes must be [allow-listed](/ui/settings/builtin:span-attribute \"Visit Span attribute page\") in order to be used as a service name  \nResource attributes must be [allow-listed](/ui/settings/builtin:resource-attribute \"Visit Resource attribute page\") in order to be used as a service name",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SERVICE_ID_AND_NAME",
						"property": "outputType",
						"type": "EQUALS"
					},
					"type": "text"
				}
			},
			"summaryPattern": "",
			"type": "object",
			"version": "0.0.4",
			"versionInfo": ""
		},
		"ServiceIdContributor": {
			"description": "",
			"displayName": "ServiceIdContributor",
			"documentation": "",
			"properties": {
				"extractionValue": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Extraction id",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "EXTRACTION_VALUE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"resourceAttributeKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "resource-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "resource-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "RESOURCE_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"source": {
					"default": "SPAN_NAME",
					"description": "",
					"displayName": "Source",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/KnownServiceInput"
					}
				},
				"sourceKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "span-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "span-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				}
			},
			"summaryPattern": "{source} {sourceKey}{resourceAttributeKey}{extractionValue}",
			"type": "object",
			"version": "0.0.3",
			"versionInfo": ""
		},
		"ServiceMethodDetectionRule": {
			"constraints": [
				{
					"customValidatorId": "span-sd-config-method-name-placeholder-is-id-contributors-validator",
					"type": "CUSTOM_VALIDATOR_REF"
				}
			],
			"description": "",
			"displayName": "Service method detection ruleset",
			"documentation": "",
			"properties": {
				"conditions": {
					"description": "",
					"displayName": "Method conditions",
					"documentation": "Specify conditions which should be evaluated for this rule. A rule is evaluated if all of the specified conditions match.",
					"items": {
						"description": "",
						"displayName": "Method condition",
						"documentation": "",
						"type": {
							"$ref": "#/types/Condition"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add method condition",
						"itemDisplayName": "New method condition"
					},
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "set"
				},
				"id": {
					"description": "",
					"displayName": "Method id contributors",
					"documentation": "",
					"items": {
						"description": "",
						"displayName": "Method id contributor",
						"documentation": "",
						"type": {
							"$ref": "#/types/MethodIdContributor"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add method id contributor",
						"itemDisplayName": "New method id contributor"
					},
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "METHOD_ID_AND_NAME",
						"property": "outputType",
						"type": "EQUALS"
					},
					"type": "set"
				},
				"methodName": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Method name",
					"documentation": "`Prefixes`: [SpanAttribute, Extraction, ResourceAttribute] i.e. {SpanAttribute:http.url}, {Extraction:my_variable}, , {ResourceAttribute:method.name}\n\n`Well-known placeholders`: {SpanName}, {SpanKind}, {InstrumentationScopeName}, {InstrumentationScopeVersion}\n\nSpan attributes must be [allow-listed](/ui/settings/builtin:span-attribute \"Visit Span attribute page\") in order to be used as a method name  \nResource attributes must be [allow-listed](/ui/settings/builtin:resource-attribute \"Visit Resource attribute page\") in order to be used as a method name",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "METHOD_ID_AND_NAME",
						"property": "outputType",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"methodRuleName": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Rule name",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				},
				"outputType": {
					"default": "NO_SERVICE",
					"description": "",
					"displayName": "Output",
					"documentation": "`No service`\n\nAny input matching the current rule would not be detected at the node.\n\n`Method id and name`\n\nThe method id is constructed from a set of id contributors. The method name is specified as a format string with placeholders, where each placeholder refers to any of the id contributors. \n\nEach method id contributor induces the condition that its input is available. If it is not available, the rule is considered **not matching**, the rule is not applied, and ruleset evaluation continues.",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/MethodRulesType"
					}
				}
			},
			"summaryPattern": "{methodRuleName}",
			"type": "object",
			"version": "0.0.5",
			"versionInfo": ""
		},
		"ValueSource": {
			"description": "",
			"displayName": "Value source",
			"documentation": "",
			"properties": {
				"attributeKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "span-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "span-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Span attribute key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "SPAN_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"resourceAttributeKey": {
					"constraints": [
						{
							"type": "NOT_EMPTY"
						},
						{
							"customValidatorId": "resource-attribute-key-existence-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"customValidatorId": "resource-attribute-not-confidential-validator",
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Resource attribute key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "RESOURCE_ATTRIBUTE",
						"property": "source",
						"type": "EQUALS"
					},
					"type": "text"
				},
				"source": {
					"default": "SPAN_NAME",
					"description": "",
					"displayName": "Source",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/ValueSourceType"
					}
				}
			},
			"summaryPattern": "{source} {attributeKey}{resourceAttributeKey}",
			"type": "object",
			"version": "0.0.4",
			"versionInfo": ""
		}
	},
	"version": "0.0.27"
}